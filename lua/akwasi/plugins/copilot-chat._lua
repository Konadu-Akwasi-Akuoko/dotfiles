local prompts = {
	-- Code related prompts
	Explain = [[You are an expert-level software engineer. Analyze the following code snippet and explain its functionality in detail. Break down the code into individual components, describing the purpose and behavior of each part. Discuss how the code interacts with inputs and outputs and, if applicable, explain the overall flow of execution. Provide practical usage examples, highlight potential edge cases or pitfalls, and suggest improvements or optimizations to enhance performance or readability.]],
	Review = [[
  You are a code review assistant tasked with evaluating the provided code snippet for readability, efficiency, maintainability, and adherence to best practices. Follow these guidelines:

Code Structure: Assess organization, appropriate use of functions and classes, and refactor any repeated segments.
Readability: Check for descriptive names, proper comments, and simplifiable sections.
Efficiency: Analyze performance for bottlenecks or opportunities to optimize algorithms or data structures.
Best Practices: Evaluate adherence to language-specific conventions and check for security vulnerabilities.
Provide a detailed review with specific suggestions, highlighting areas for improvement and actionable recommendations.
  ]],
	Tests = [[
  You are a code analysis and testing assistant. Your task is to:

Code Explanation: Analyze and explain the functionality, workflow, inputs/outputs, significant components, and possible edge cases of the provided code snippet.
Unit Test Generation: Create a comprehensive set of unit tests based on the analysis. Use a testing framework suited to the code’s language (e.g., unittest for Python, Jest for JavaScript) unless a sample test is provided. If provided, follow a sample test to match the framework, library and style used by the sample test. Ensure tests cover specific functionalities, edge cases, and include setup or teardown methods as needed.
Output:

A detailed code explanation.
A list of unit tests formatted for the specified framework.
  ]],
	Refactor = [[
You are an AI code refactoring assistant. Improve the provided code snippet for clarity and readability while preserving its functionality. Follow these guidelines:

Understand Functionality: Fully analyze the code before refactoring.
Simplify Logic: Break complex expressions into simpler components; use helper functions if needed.
Formatting: Apply consistent indentation, spacing, and line breaks following style guides.
Commenting: Add explanatory comments for non-obvious parts.
Remove Redundancies: Eliminate duplicate or unnecessary code.
Organization: Group related functions/classes logically.
Test Functionality: Ensure the refactored code performs identically to the original.
  ]],
	FixCode = [[
You are an AI assistant tasked with debugging and improving code snippets. Analyze the following code, identify errors or inefficiencies, and suggest corrections. Provide:

Issues Identified: List syntax errors, logical errors, or inefficiencies.
Corrections Made: Suggest enhancements for performance or readability.
Revised Code: Include a properly formatted corrected code snippet.
Explanation of Changes: Explain why each change resolves an issue or improves the code.
  ]],
	FixError = [[
You are an AI programming assistant. Analyze the provided error text and code snippet to:

Identify the root cause of the error and explain its meaning.
Examine the code for mistakes or misconfigurations causing the error.
Provide a detailed explanation, including:
The error message's meaning.
Possible reasons for the error.
The specific lines causing the issue.
Suggest a clear, actionable solution with examples of corrected code if applicable.
  ]],
	BetterNamings = [[
You are an AI code optimization assistant. Analyze the provided code snippet and suggest improved, descriptive names for variables and functions to enhance readability and maintainability. Avoid abbreviations, and ensure names reflect their purpose.

Output Format:

Suggested Name Changes:
Original Name: [original] → Suggested Name: [improved]
Explanation: [justification for the change]
Repeat for each variable or function. Maintain the code’s context and avoid altering its functionality.
  ]],
	Documentation = "Please provide documentation for the following code.",
	SwaggerApiDocs = "Please provide documentation for the following API using Swagger.",
	SwaggerJsDocs = "Please write JSDoc for the following API using Swagger.",
	-- Text related prompts
	Summarize = "Please summarize the following text.",
	Spelling = "Please correct any grammar and spelling errors in the following text.",
	Wording = "Please improve the grammar and wording of the following text.",
	Concise = "Please rewrite the following text to make it more concise.",
}

return {
	{
		"CopilotC-Nvim/CopilotChat.nvim",
		dependencies = {
			{ "github/copilot.vim" },
			{ "nvim-lua/plenary.nvim" },
		},
		opts = {
			question_header = "## User ",
			answer_header = "## Copilot ",
			error_header = "## Error ",
			prompts = prompts,
			mappings = {
				complete = {
					detail = "Use @<Tab> or /<Tab> for options.",
					insert = "<Tab>",
				},
				close = {
					normal = "q",
					insert = "<C-c>",
				},
				reset = {
					normal = "<C-x>",
					insert = "<C-x>",
				},
				submit_prompt = {
					normal = "<CR>",
					insert = "<C-CR>",
				},
				accept_diff = {
					normal = "<C-y>",
					insert = "<C-y>",
				},
				show_help = {
					normal = "g?",
				},
			},
		},
		config = function(_, opts)
			local chat = require("CopilotChat")

			local hostname = io.popen("hostname"):read("*a"):gsub("%s+", "")
			local user = hostname or vim.env.USER or "User"
			opts.question_header = "  " .. user .. " "
			opts.answer_header = "  Copilot "
			opts.prompts.Commit = {
				prompt = '> #git:staged\n\nWrite commit message with commitizen convention. Write clear, informative commit messages that explain the "what" and "why" behind changes, not just the "how".',
			}

			chat.setup(opts)

			local select = require("CopilotChat.select")
			vim.api.nvim_create_user_command("CopilotChatVisual", function(args)
				chat.ask(args.args, { selection = select.visual })
			end, { nargs = "*", range = true })

			vim.api.nvim_create_user_command("CopilotChatInline", function(args)
				chat.ask(args.args, {
					selection = select.visual,
					window = {
						layout = "float",
						relative = "cursor",
						width = 1,
						height = 0.4,
						row = 1,
					},
				})
			end, { nargs = "*", range = true })

			vim.api.nvim_create_user_command("CopilotChatBuffer", function(args)
				chat.ask(args.args, { selection = select.buffer })
			end, { nargs = "*", range = true })

			vim.api.nvim_create_autocmd("BufEnter", {
				pattern = "copilot-*",
				callback = function()
					vim.opt_local.relativenumber = true
					vim.opt_local.number = true
				end,
			})
		end,
		keys = {
			-- Basic chat commands
			{ "<leader>ccc", "<cmd>CopilotChat<cr>", desc = "Open chat window with optional input" },
			{ "<leader>cco", "<cmd>CopilotChatOpen<cr>", desc = "Open chat window" },
			{ "<leader>ccx", "<cmd>CopilotChatClose<cr>", desc = "Close chat window" },
			{ "<leader>cct", "<cmd>CopilotChatToggle<cr>", desc = "Toggle chat window" },
			{ "<leader>ccs", "<cmd>CopilotChatStop<cr>", desc = "Stop current copilot output" },
			{ "<leader>ccr", "<cmd>CopilotChatReset<cr>", desc = "Reset chat window" },
			{ "<leader>ccS", "<cmd>CopilotChatSave<cr>", desc = "Save chat history to file" },
			{ "<leader>ccl", "<cmd>CopilotChatLoad<cr>", desc = "Load chat history from file" },
			{ "<leader>ccd", "<cmd>CopilotChatDebugInfo<cr>", desc = "Show debug information" },
			{ "<leader>ccm", "<cmd>CopilotChatModels<cr>", desc = "View and select available models" },
			{ "<leader>cca", "<cmd>CopilotChatAgents<cr>", desc = "View and select available agents" },

			-- Visual mode commands
			{
				"<leader>ccE",
				":CopilotChatExplain<cr>",
				mode = { "v", "x" },
				desc = "Ask Copilot to explain the selected code",
			},
			{
				"<leader>ccR",
				":CopilotChatReview<cr>",
				mode = { "v", "x" },
				desc = "Ask Copilot to review the selected code",
			},
			{
				"<leader>ccF",
				":CopilotChatFix<cr>",
				mode = { "v", "x" },
				desc = "Ask Copilot to fix the selected code",
			},
			{
				"<leader>ccO",
				":CopilotChatOptimize<cr>",
				mode = { "v", "x" },
				desc = "Ask Copilot to optimize the selected code",
			},
			{
				"<leader>ccD",
				":CopilotChatDocs<cr>",
				mode = { "v", "x" },
				desc = "Ask Copilot to add documentation comments to the selected code",
			},
			{
				"<leader>ccT",
				":CopilotChatTests<cr>",
				mode = { "v", "x" },
				desc = "Ask Copilot to generate tests for the selected code",
			},
			{
				"<leader>ccC",
				":CopilotChatCommit<cr>",
				mode = { "v", "x" },
				desc = "Ask Copilot to write a commit message for the change",
			},

			-- Additional commands from original config adapted to new style
			{ "<leader>ccb", ":CopilotChatBuffer<cr>", desc = "Chat with buffer context" },
			{ "<leader>ccn", "<cmd>CopilotChatBetterNamings<cr>", desc = "Get better naming suggestions" },
			{ "<leader>ccf", "<cmd>CopilotChatFixDiagnostic<cr>", desc = "Fix diagnostic issue" },
			{ "<leader>cci", "<cmd>CopilotChatInline<cr>", mode = { "v", "x" }, desc = "Inline chat" },
			{
				"<leader>ccp",
				function()
					local actions = require("CopilotChat.actions")
					require("CopilotChat.integrations.fzflua").pick(actions.prompt_actions())
				end,
				desc = "Prompt actions",
			},
		},
	},
}
